{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOFquJiEWlYpsmvN4rrgAzC",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/pvsk0226/Stock-Analysis/blob/main/SQL%20Database\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "xkhMMW0I0qM1",
        "outputId": "6aded448-749f-44c3-b0dd-a37f77040f5b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting mysql-connector-python\n",
            "  Downloading mysql_connector_python-9.4.0-cp312-cp312-manylinux_2_28_x86_64.whl.metadata (7.5 kB)\n",
            "Requirement already satisfied: sqlalchemy in /usr/local/lib/python3.12/dist-packages (2.0.43)\n",
            "Collecting pymysql\n",
            "  Downloading pymysql-1.1.2-py3-none-any.whl.metadata (4.3 kB)\n",
            "Requirement already satisfied: greenlet>=1 in /usr/local/lib/python3.12/dist-packages (from sqlalchemy) (3.2.4)\n",
            "Requirement already satisfied: typing-extensions>=4.6.0 in /usr/local/lib/python3.12/dist-packages (from sqlalchemy) (4.15.0)\n",
            "Downloading mysql_connector_python-9.4.0-cp312-cp312-manylinux_2_28_x86_64.whl (33.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m33.9/33.9 MB\u001b[0m \u001b[31m18.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading pymysql-1.1.2-py3-none-any.whl (45 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m45.3/45.3 kB\u001b[0m \u001b[31m2.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: pymysql, mysql-connector-python\n",
            "Successfully installed mysql-connector-python-9.4.0 pymysql-1.1.2\n"
          ]
        }
      ],
      "source": [
        "!pip install mysql-connector-python sqlalchemy pymysql"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install pymysql sqlalchemy pandas"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "4bYol2q-1PyD",
        "outputId": "11eae370-ab57-42e2-a418-4a378b72931f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pymysql in /usr/local/lib/python3.12/dist-packages (1.1.2)\n",
            "Requirement already satisfied: sqlalchemy in /usr/local/lib/python3.12/dist-packages (2.0.43)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.12/dist-packages (2.2.2)\n",
            "Requirement already satisfied: greenlet>=1 in /usr/local/lib/python3.12/dist-packages (from sqlalchemy) (3.2.4)\n",
            "Requirement already satisfied: typing-extensions>=4.6.0 in /usr/local/lib/python3.12/dist-packages (from sqlalchemy) (4.15.0)\n",
            "Requirement already satisfied: numpy>=1.26.0 in /usr/local/lib/python3.12/dist-packages (from pandas) (2.0.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.12/dist-packages (from pandas) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.12/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.12/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.12/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install tabulate"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eJrMaIqn1Swj",
        "outputId": "af3fa0dd-824f-4569-857c-481e2846ce7f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: tabulate in /usr/local/lib/python3.12/dist-packages (0.9.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sqlalchemy import create_engine\n",
        "import mysql.connector\n",
        "\n",
        "import mysql.connector\n",
        "\n",
        "mydb = mysql.connector.connect(\n",
        " host=\"gateway01.ap-southeast-1.prod.aws.tidbcloud.com\",\n",
        " user= \"3LBRyXkYRgoP1FS.root\",\n",
        " password=\"fwJACxECJe0b7ZlM\",\n",
        " port = 4000,\n",
        ")\n",
        "print(mydb)\n",
        "mycursor = mydb.cursor(buffered=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HrJ4dXRR1c0B",
        "outputId": "2e943a43-7a49-4d27-b2de-5233ea6d4772"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<mysql.connector.connection.MySQLConnection object at 0x7c3dbebd3830>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mycursor.execute(\"SHOW DATABASES\")\n",
        "for x in mycursor:\n",
        "  print(x)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QrCBf-2P1txJ",
        "outputId": "bae87b3d-edb9-4a9c-bb2e-ed231003bb6f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "('INFORMATION_SCHEMA',)\n",
            "('Heaven',)\n",
            "('PERFORMANCE_SCHEMA',)\n",
            "('Stock_Analysis',)\n",
            "('guvi',)\n",
            "('imdb2024',)\n",
            "('imdb2024A',)\n",
            "('lightning_task_info',)\n",
            "('mysql',)\n",
            "('pavi',)\n",
            "('test',)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mycursor.execute(\"SHOW TABLES IN Stock_Analysis\")\n",
        "out=mycursor.fetchall()\n",
        "from tabulate import tabulate\n",
        "# print(mycursor.description)\n",
        "print(tabulate(out,headers=[i[0] for i in mycursor.description],  tablefmt='psql'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cfUUplGE2GgZ",
        "outputId": "856586a5-9869-45c0-fd21-4b0df6d6fd64"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+----------------------------+\n",
            "| Tables_in_Stock_Analysis   |\n",
            "|----------------------------|\n",
            "| YearlyReturn               |\n",
            "| correlationmatrix          |\n",
            "| cumulative_return          |\n",
            "| dailyreturn                |\n",
            "| full_dailyreturn_stocks    |\n",
            "| stocks_with_sector         |\n",
            "| volatility                 |\n",
            "+----------------------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Top 10 Green stock"
      ],
      "metadata": {
        "id": "vcwyScqQyyUX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mycursor.execute(\"Select stock, return from Stock_Analysis.YearlyReturn order by return DESC LIMIT 10 \")\n",
        "\n",
        "out=mycursor.fetchall()\n",
        "from tabulate import tabulate\n",
        "# print(mycursor.description)\n",
        "print(tabulate(out,headers=[i[0] for i in mycursor.description],  tablefmt='psql'))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h7A7u842yK15",
        "outputId": "83d6bb06-b188-41af-8765-c57556084d9e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+------------+----------+\n",
            "| stock      |   return |\n",
            "|------------+----------|\n",
            "| TRENT      | 223.093  |\n",
            "| BEL        | 101.76   |\n",
            "| M&M        |  95.977  |\n",
            "| BAJAJ-AUTO |  89.0112 |\n",
            "| BHARTIARTL |  69.599  |\n",
            "| POWERGRID  |  68.8549 |\n",
            "| BPCL       |  67.4772 |\n",
            "| HEROMOTOCO |  58.9767 |\n",
            "| SUNPHARMA  |  57.2824 |\n",
            "| HCLTECH    |  53.2574 |\n",
            "+------------+----------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Top 10 Loss Stock"
      ],
      "metadata": {
        "id": "Eccod8Ityjjs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mycursor.execute(\"Select stock, return from Stock_Analysis.YearlyReturn order by return ASC LIMIT 10 \")\n",
        "\n",
        "out=mycursor.fetchall()\n",
        "from tabulate import tabulate\n",
        "# print(mycursor.description)\n",
        "print(tabulate(out,headers=[i[0] for i in mycursor.description],  tablefmt='psql'))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YwjZSp8dyTY7",
        "outputId": "0a790514-3eaa-4107-b8a2-0a49a52ae014"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+------------+------------+\n",
            "| stock      |     return |\n",
            "|------------+------------|\n",
            "| INDUSINDBK | -30.4584   |\n",
            "| ASIANPAINT | -21.935    |\n",
            "| BAJFINANCE | -16.1109   |\n",
            "| ADANIENT   |  -6.67086  |\n",
            "| HINDUNILVR |  -0.957916 |\n",
            "| NESTLEIND  |   0.707141 |\n",
            "| KOTAKBANK  |   1.99184  |\n",
            "| BAJAJFINSV |   2.54957  |\n",
            "| TITAN      |   3.51819  |\n",
            "| MARUTI     |   6.92671  |\n",
            "+------------+------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Overall number of green vs. red stocks.\n"
      ],
      "metadata": {
        "id": "qifdz_0my4Mf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mycursor.execute(\"Select ticker, daily_return from Stock_Analysis.full_dailyreturn_stocks order by daily_return DESC LIMIT 10 \")\n",
        "\n",
        "out=mycursor.fetchall()\n",
        "from tabulate import tabulate\n",
        "# print(mycursor.description)\n",
        "print(tabulate(out,headers=[i[0] for i in mycursor.description],  tablefmt='psql'))"
      ],
      "metadata": {
        "id": "rsmdr2Vdybvj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9a053656-2e7c-43fe-a76a-46062ab7383e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+------------+----------------+\n",
            "| ticker     |   daily_return |\n",
            "|------------+----------------|\n",
            "| TRENT      |      0.188633  |\n",
            "| ADANIENT   |      0.169149  |\n",
            "| ADANIPORTS |      0.153019  |\n",
            "| TRENT      |      0.111842  |\n",
            "| ADANIENT   |      0.10866   |\n",
            "| WIPRO      |      0.103064  |\n",
            "| COALINDIA  |      0.102849  |\n",
            "| ADANIPORTS |      0.101955  |\n",
            "| BPCL       |      0.0981395 |\n",
            "| CIPLA      |      0.0941301 |\n",
            "+------------+----------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mycursor.execute(\"Select * from Stock_Analysis.full_dailyreturn_stocks LIMIT 10 \")\n",
        "out=mycursor.fetchall()\n",
        "from tabulate import tabulate\n",
        "# print(mycursor.description)\n",
        "print(tabulate(out,headers=[i[0] for i in mycursor.description],  tablefmt='psql'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FhPMroYPzzZe",
        "outputId": "36650b5c-f26c-409e-e670-b259d57344ec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+----------+---------+---------------------+---------+---------+---------+---------+----------+----------------+----------+\n",
            "| ticker   |   close | date                |    high |     low | month   |    open |   volume |   daily_return | status   |\n",
            "|----------+---------+---------------------+---------+---------+---------+---------+----------+----------------+----------|\n",
            "| ADANIENT | 2294.65 | 2023-10-31 05:30:00 | 2320    | 2276    | 2023-10 | 2320    |  1155280 |      0         | Red      |\n",
            "| ADANIENT | 2488.6  | 2023-10-11 05:30:00 | 2538    | 2482.5  | 2023-10 | 2533.9  |  1627836 |      0.0845227 | Red      |\n",
            "| ADANIENT | 2261.7  | 2023-10-27 05:30:00 | 2275    | 2212    | 2023-10 | 2222    |  1244293 |     -0.0911758 | Green    |\n",
            "| ADANIENT | 2429.35 | 2023-10-16 05:30:00 | 2464.7  | 2421.85 | 2023-10 | 2454.55 |   803856 |      0.0741257 | Red      |\n",
            "| ADANIENT | 2506.35 | 2023-10-12 05:30:00 | 2521.75 | 2490.65 | 2023-10 | 2499.9  |  1804818 |      0.0316957 | Green    |\n",
            "| ADANIENT | 2454.55 | 2023-10-13 05:30:00 | 2495    | 2422.35 | 2023-10 | 2488.9  |  2278682 |     -0.0206675 | Red      |\n",
            "| ADANIENT | 2402.2  | 2023-10-19 05:30:00 | 2414.7  | 2382.55 | 2023-10 | 2400    |  1168822 |     -0.0213277 | Green    |\n",
            "| ADANIENT | 2498.3  | 2023-10-10 05:30:00 | 2517.95 | 2443    | 2023-10 | 2443    |  1771910 |      0.040005  | Green    |\n",
            "| ADANIENT | 2203.2  | 2023-10-26 05:30:00 | 2249    | 2167.05 | 2023-10 | 2249    |  2226073 |     -0.11812   | Red      |\n",
            "| ADANIENT | 2442.6  | 2023-10-09 05:30:00 | 2459.7  | 2411.3  | 2023-10 | 2440    |  1408224 |      0.10866   | Green    |\n",
            "+----------+---------+---------------------+---------+---------+---------+---------+----------+----------------+----------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**The overall number of green vs. red stocks:**\n"
      ],
      "metadata": {
        "id": "BmCK5R4VRn17"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mycursor.execute(\"SELECT status, COUNT(*) FROM Stock_Analysis.full_dailyreturn_stocks GROUP BY status\")\n",
        "\n",
        "out = mycursor.fetchall()\n",
        "from tabulate import tabulate\n",
        "print(tabulate(out, headers=[i[0] for i in mycursor.description], tablefmt='psql'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z9wPOUM8zmxj",
        "outputId": "b2f6e369-3fb8-4c28-d031-ab685ada64a3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+----------+------------+\n",
            "| status   |   COUNT(*) |\n",
            "|----------+------------|\n",
            "| Red      |       7656 |\n",
            "| Green    |       6544 |\n",
            "+----------+------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**The average price across all stocks:**\n"
      ],
      "metadata": {
        "id": "QEuUZDWtR4YD"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2859487a",
        "outputId": "a0624df7-f6c4-487c-df0f-ecfd93b50782"
      },
      "source": [
        "mycursor.execute(\"SELECT AVG(close) FROM Stock_Analysis.full_dailyreturn_stocks\")\n",
        "\n",
        "out = mycursor.fetchone() # Use fetchone() for a single average value\n",
        "from tabulate import tabulate\n",
        "print(tabulate([out], headers=[i[0] for i in mycursor.description], tablefmt='psql'))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+--------------+\n",
            "|   AVG(close) |\n",
            "|--------------|\n",
            "|      2449.42 |\n",
            "+--------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**The average Volume across all stocks:**\n"
      ],
      "metadata": {
        "id": "vjBTG6SvSHV7"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7a11134c",
        "outputId": "c8b8bc8a-9141-4091-cd6f-cd39a7cbe576"
      },
      "source": [
        "mycursor.execute(\"SELECT AVG(volume) FROM Stock_Analysis.full_dailyreturn_stocks\")\n",
        "\n",
        "out = mycursor.fetchone()\n",
        "from tabulate import tabulate\n",
        "print(tabulate([out], headers=[i[0] for i in mycursor.description], tablefmt='psql'))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+---------------+\n",
            "|   AVG(volume) |\n",
            "|---------------|\n",
            "|   6.83347e+06 |\n",
            "+---------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Volatility**"
      ],
      "metadata": {
        "id": "fD62q9ZI1pqH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mycursor.execute(\"SELECT * FROM Stock_Analysis.volatility LIMIT 10\")\n",
        "\n",
        "\n",
        "out = mycursor.fetchall()\n",
        "from tabulate import tabulate\n",
        "print(tabulate(out, headers=[i[0] for i in mycursor.description], tablefmt='psql'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pBQ3Glhl1ZVn",
        "outputId": "60282fea-f134-4984-9b30-b39755fa2c7c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+----------+---------------------+---------------+--------------------+\n",
            "| ticker   | date                |   dailyreturn |   daily_return_std |\n",
            "|----------+---------------------+---------------+--------------------|\n",
            "| ADANIENT | 2023-10-31 05:30:00 |     0         |          0.0324939 |\n",
            "| ADANIENT | 2023-10-11 05:30:00 |     0.0845227 |          0.0324939 |\n",
            "| ADANIENT | 2023-10-27 05:30:00 |    -0.0911758 |          0.0324939 |\n",
            "| ADANIENT | 2023-10-16 05:30:00 |     0.0741257 |          0.0324939 |\n",
            "| ADANIENT | 2023-10-12 05:30:00 |     0.0316957 |          0.0324939 |\n",
            "| ADANIENT | 2023-10-13 05:30:00 |    -0.0206675 |          0.0324939 |\n",
            "| ADANIENT | 2023-10-19 05:30:00 |    -0.0213277 |          0.0324939 |\n",
            "| ADANIENT | 2023-10-10 05:30:00 |     0.040005  |          0.0324939 |\n",
            "| ADANIENT | 2023-10-26 05:30:00 |    -0.11812   |          0.0324939 |\n",
            "| ADANIENT | 2023-10-09 05:30:00 |     0.10866   |          0.0324939 |\n",
            "+----------+---------------------+---------------+--------------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The volatility of each stock over the past year by calculating the standard deviation of daily returns:"
      ],
      "metadata": {
        "id": "wMOfOc9rT2FT"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "aab6c465",
        "outputId": "a59f1019-6caa-40de-df5e-fdebb8ff2625"
      },
      "source": [
        "mycursor.execute(\"SELECT ticker, AVG(daily_return_std) FROM Stock_Analysis.volatility GROUP BY ticker\")\n",
        "\n",
        "out = mycursor.fetchall()\n",
        "from tabulate import tabulate\n",
        "print(tabulate(out, headers=[i[0] for i in mycursor.description], tablefmt='psql'))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+------------+-------------------------+\n",
            "| ticker     |   AVG(daily_return_std) |\n",
            "|------------+-------------------------|\n",
            "| AXISBANK   |               0.0169828 |\n",
            "| BAJFINANCE |               0.0198098 |\n",
            "| JSWSTEEL   |               0.0191508 |\n",
            "| WIPRO      |               0.0221676 |\n",
            "| TRENT      |               0.0238667 |\n",
            "| BHARTIARTL |               0.0148569 |\n",
            "| BPCL       |               0.022397  |\n",
            "| ONGC       |               0.0224443 |\n",
            "| TITAN      |               0.0160081 |\n",
            "| NTPC       |               0.0202822 |\n",
            "| SBILIFE    |               0.0167158 |\n",
            "| TECHM      |               0.020828  |\n",
            "| HCLTECH    |               0.0149673 |\n",
            "| HINDUNILVR |               0.0127999 |\n",
            "| SUNPHARMA  |               0.0122767 |\n",
            "| TATAMOTORS |               0.0199244 |\n",
            "| POWERGRID  |               0.0196259 |\n",
            "| ADANIPORTS |               0.0275612 |\n",
            "| BRITANNIA  |               0.0135874 |\n",
            "| INDUSINDBK |               0.0192934 |\n",
            "| HDFCLIFE   |               0.0158291 |\n",
            "| ICICIBANK  |               0.0142331 |\n",
            "| GRASIM     |               0.0165653 |\n",
            "| BEL        |               0.0248158 |\n",
            "| TCS        |               0.0178896 |\n",
            "| HINDALCO   |               0.0213981 |\n",
            "| RELIANCE   |               0.0144048 |\n",
            "| NESTLEIND  |               0.0152934 |\n",
            "| HEROMOTOCO |               0.0187267 |\n",
            "| TATACONSUM |               0.0158139 |\n",
            "| BAJAJ-AUTO |               0.0214161 |\n",
            "| ADANIENT   |               0.0324939 |\n",
            "| CIPLA      |               0.0171961 |\n",
            "| ITC        |               0.0134908 |\n",
            "| SBIN       |               0.0205909 |\n",
            "| DRREDDY    |               0.0139363 |\n",
            "| HDFCBANK   |               0.0147885 |\n",
            "| APOLLOHOSP |               0.0164988 |\n",
            "| MARUTI     |               0.0148568 |\n",
            "| BAJAJFINSV |               0.0160903 |\n",
            "| LT         |               0.0199732 |\n",
            "| KOTAKBANK  |               0.0146887 |\n",
            "| ASIANPAINT |               0.0164151 |\n",
            "| EICHERMOT  |               0.0173901 |\n",
            "| TATASTEEL  |               0.0204028 |\n",
            "| ULTRACEMCO |               0.0146577 |\n",
            "| SHRIRAMFIN |               0.0217921 |\n",
            "| COALINDIA  |               0.0242418 |\n",
            "| M&M        |               0.0203713 |\n",
            "| INFY       |               0.0193726 |\n",
            "+------------+-------------------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Cumulative return**"
      ],
      "metadata": {
        "id": "qw_Q-t7n5A3n"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "386f9423",
        "outputId": "967a8451-5906-40d6-9ba4-4d19c6289c82"
      },
      "source": [
        "mycursor.execute(\"SELECT * FROM Stock_Analysis.cumulative_return LIMIT 10\")\n",
        "\n",
        "out = mycursor.fetchall()\n",
        "from tabulate import tabulate\n",
        "print(tabulate(out, headers=[i[0] for i in mycursor.description], tablefmt='psql'))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+----------+---------------------+----------------+---------------------+\n",
            "| ticker   | date                |   daily_return |   cumulative_return |\n",
            "|----------+---------------------+----------------+---------------------|\n",
            "| ADANIENT | 2023-10-03 05:30:00 |    -0.0315219  |         -0.0315219  |\n",
            "| ADANIENT | 2023-10-04 05:30:00 |     0.00915009 |         -0.0223747  |\n",
            "| ADANIENT | 2023-10-05 05:30:00 |     0.0156276  |         -0.00675066 |\n",
            "| ADANIENT | 2023-10-06 05:30:00 |     0.0352376  |          0.0284846  |\n",
            "| ADANIENT | 2023-10-09 05:30:00 |     0.10866    |          0.137176   |\n",
            "| ADANIENT | 2023-10-10 05:30:00 |     0.040005   |          0.177236   |\n",
            "| ADANIENT | 2023-10-11 05:30:00 |     0.0845227  |          0.261908   |\n",
            "| ADANIENT | 2023-10-12 05:30:00 |     0.0316957  |          0.293687   |\n",
            "| ADANIENT | 2023-10-13 05:30:00 |    -0.0206675  |          0.272959   |\n",
            "| ADANIENT | 2023-10-16 05:30:00 |     0.0741257  |          0.347287   |\n",
            "+----------+---------------------+----------------+---------------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The cumulative return of each stock from the beginning of the year to the end:\n"
      ],
      "metadata": {
        "id": "FLFivNueUYV6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mycursor.execute(\"SELECT ticker, AVG(cumulative_return) FROM Stock_Analysis.cumulative_return group by ticker HAVING AVG(cumulative_return) > 0 ORDER BY AVG(cumulative_return) DESC\")\n",
        "\n",
        "out = mycursor.fetchall()\n",
        "from tabulate import tabulate\n",
        "print(tabulate(out, headers=[i[0] for i in mycursor.description], tablefmt='psql'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eEwW2ImuNN7T",
        "outputId": "2a3c872e-9854-4a26-d6bf-656c636e637c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+------------+--------------------------+\n",
            "| ticker     |   AVG(cumulative_return) |\n",
            "|------------+--------------------------|\n",
            "| TRENT      |                0.743883  |\n",
            "| BEL        |                0.578628  |\n",
            "| ADANIPORTS |                0.522917  |\n",
            "| BPCL       |                0.508592  |\n",
            "| BAJAJ-AUTO |                0.481095  |\n",
            "| M&M        |                0.431536  |\n",
            "| HEROMOTOCO |                0.423375  |\n",
            "| NTPC       |                0.40084   |\n",
            "| TATAMOTORS |                0.368     |\n",
            "| POWERGRID  |                0.36109   |\n",
            "| COALINDIA  |                0.356803  |\n",
            "| ONGC       |                0.353671  |\n",
            "| BHARTIARTL |                0.347795  |\n",
            "| SUNPHARMA  |                0.339545  |\n",
            "| ADANIENT   |                0.339057  |\n",
            "| SHRIRAMFIN |                0.331557  |\n",
            "| HINDALCO   |                0.312312  |\n",
            "| SBIN       |                0.30857   |\n",
            "| EICHERMOT  |                0.287698  |\n",
            "| WIPRO      |                0.287343  |\n",
            "| APOLLOHOSP |                0.275866  |\n",
            "| TATASTEEL  |                0.262608  |\n",
            "| TECHM      |                0.243169  |\n",
            "| GRASIM     |                0.242095  |\n",
            "| INFY       |                0.214231  |\n",
            "| LT         |                0.212416  |\n",
            "| RELIANCE   |                0.207714  |\n",
            "| ICICIBANK  |                0.207344  |\n",
            "| ULTRACEMCO |                0.206702  |\n",
            "| JSWSTEEL   |                0.20197   |\n",
            "| TATACONSUM |                0.201526  |\n",
            "| HCLTECH    |                0.197743  |\n",
            "| TCS        |                0.196985  |\n",
            "| CIPLA      |                0.191384  |\n",
            "| BRITANNIA  |                0.177052  |\n",
            "| AXISBANK   |                0.163723  |\n",
            "| DRREDDY    |                0.150688  |\n",
            "| SBILIFE    |                0.123978  |\n",
            "| MARUTI     |                0.120221  |\n",
            "| TITAN      |                0.11179   |\n",
            "| HDFCBANK   |                0.0853911 |\n",
            "| ITC        |                0.0725573 |\n",
            "| BAJAJFINSV |                0.0698557 |\n",
            "| HDFCLIFE   |                0.0549237 |\n",
            "| NESTLEIND  |                0.0394334 |\n",
            "| ASIANPAINT |                0.0377145 |\n",
            "| KOTAKBANK  |                0.0358678 |\n",
            "| HINDUNILVR |                0.0289698 |\n",
            "| INDUSINDBK |                0.0134727 |\n",
            "+------------+--------------------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Sector-wise Performance:**"
      ],
      "metadata": {
        "id": "OJq27O62Uhb7"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "tB_KFVerUhNV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mycursor.execute(\"SELECT * FROM Stock_Analysis.stocks_with_sector LIMIT 10\")\n",
        "\n",
        "out = mycursor.fetchall()\n",
        "from tabulate import tabulate\n",
        "print(tabulate(out, headers=[i[0] for i in mycursor.description], tablefmt='psql'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N--1IeHMQM7q",
        "outputId": "3f3aabca-11c7-4bfc-df2a-ae1b5b6f2d4d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+----------+---------+---------------------+---------+---------+---------+---------+----------+----------------+----------+---------------+\n",
            "| ticker   |   close | date                |    high |     low | month   |    open |   volume |   daily_return | status   | sector        |\n",
            "|----------+---------+---------------------+---------+---------+---------+---------+----------+----------------+----------+---------------|\n",
            "| ADANIENT | 2294.65 | 2023-10-31 05:30:00 | 2320    | 2276    | 2023-10 | 2320    |  1155280 |      0         | Red      | MISCELLANEOUS |\n",
            "| ADANIENT | 2488.6  | 2023-10-11 05:30:00 | 2538    | 2482.5  | 2023-10 | 2533.9  |  1627836 |      0.0845227 | Red      | MISCELLANEOUS |\n",
            "| ADANIENT | 2261.7  | 2023-10-27 05:30:00 | 2275    | 2212    | 2023-10 | 2222    |  1244293 |     -0.0911758 | Green    | MISCELLANEOUS |\n",
            "| ADANIENT | 2429.35 | 2023-10-16 05:30:00 | 2464.7  | 2421.85 | 2023-10 | 2454.55 |   803856 |      0.0741257 | Red      | MISCELLANEOUS |\n",
            "| ADANIENT | 2506.35 | 2023-10-12 05:30:00 | 2521.75 | 2490.65 | 2023-10 | 2499.9  |  1804818 |      0.0316957 | Green    | MISCELLANEOUS |\n",
            "| ADANIENT | 2454.55 | 2023-10-13 05:30:00 | 2495    | 2422.35 | 2023-10 | 2488.9  |  2278682 |     -0.0206675 | Red      | MISCELLANEOUS |\n",
            "| ADANIENT | 2402.2  | 2023-10-19 05:30:00 | 2414.7  | 2382.55 | 2023-10 | 2400    |  1168822 |     -0.0213277 | Green    | MISCELLANEOUS |\n",
            "| ADANIENT | 2498.3  | 2023-10-10 05:30:00 | 2517.95 | 2443    | 2023-10 | 2443    |  1771910 |      0.040005  | Green    | MISCELLANEOUS |\n",
            "| ADANIENT | 2203.2  | 2023-10-26 05:30:00 | 2249    | 2167.05 | 2023-10 | 2249    |  2226073 |     -0.11812   | Red      | MISCELLANEOUS |\n",
            "| ADANIENT | 2442.6  | 2023-10-09 05:30:00 | 2459.7  | 2411.3  | 2023-10 | 2440    |  1408224 |      0.10866   | Green    | MISCELLANEOUS |\n",
            "+----------+---------+---------------------+---------+---------+---------+---------+----------+----------------+----------+---------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "A breakdown of stock performance by sector:"
      ],
      "metadata": {
        "id": "H_rPTK14UkdV"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9fb67335",
        "outputId": "a4f43b1d-33e0-48ae-ee4c-993fefd3965d"
      },
      "source": [
        "mycursor.execute(\"\"\"\n",
        "    SELECT s.sector, AVG(yr.return) AS average_yearly_return\n",
        "    FROM Stock_Analysis.YearlyReturn yr\n",
        "    JOIN Stock_Analysis.stocks_with_sector s ON yr.stock = s.ticker\n",
        "    GROUP BY s.sector\n",
        "\"\"\")\n",
        "\n",
        "out = mycursor.fetchall()\n",
        "from tabulate import tabulate\n",
        "print(tabulate(out, headers=[i[0] for i in mycursor.description], tablefmt='psql'))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+-----------------+-------------------------+\n",
            "| sector          |   average_yearly_return |\n",
            "|-----------------+-------------------------|\n",
            "| STEEL           |                19.2171  |\n",
            "| ENGINEERING     |                17.2537  |\n",
            "| MISCELLANEOUS   |                21.8451  |\n",
            "| BANKING         |                 7.975   |\n",
            "| FMCG            |                 4.39796 |\n",
            "| ENERGY          |                36.5648  |\n",
            "| FINANCE         |                11.5761  |\n",
            "| TEXTILES        |                35.782   |\n",
            "| PHARMACEUTICALS |                31.3792  |\n",
            "| POWER           |                60.1841  |\n",
            "| CEMENT          |                36.9709  |\n",
            "| DEFENCE         |               101.76    |\n",
            "| TELECOM         |                69.599   |\n",
            "| RETAILING       |               113.305   |\n",
            "| AUTOMOBILES     |                54.5265  |\n",
            "| ALUMINIUM       |                35.8683  |\n",
            "| FOOD & TOBACCO  |                 5.49788 |\n",
            "| MINING          |                41.8465  |\n",
            "| PAINTS          |               -21.935   |\n",
            "| INSURANCE       |                21.9844  |\n",
            "| SOFTWARE        |                38.276   |\n",
            "+-----------------+-------------------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Stock Price Correation:**\n",
        "\n",
        "The correlation matrix shows the pairwise correlation coefficients between the daily returns of different stocks.\n",
        "\n",
        "Values range from -1 to 1:\n",
        "A value close to 1 indicates a strong positive correlation, meaning the stock prices tend to move in the same direction.\n",
        "A value close to -1 indicates a strong negative correlation, meaning the stock prices tend to move in opposite directions.\n",
        "A value close to 0 indicates a weak or no linear correlation.\n",
        "Diagonal values are always 1: This is because a stock's price is perfectly correlated with itself.\n",
        "From the output, we can see some examples:\n",
        "\n",
        "ADANIENT and ADANIPORTS have a correlation of 0.845806, indicating a strong positive correlation.\n",
        "\n",
        "ADANIENT and ASIANPAINTS have a correlation of -0.186479, indicating a weak negative correlation.\n"
      ],
      "metadata": {
        "id": "ws_6e1j_Us0P"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mycursor.execute(\"SELECT * FROM Stock_Analysis.correlationmatrix LIMIT 10\")\n",
        "\n",
        "out = mycursor.fetchall()\n",
        "from tabulate import tabulate\n",
        "print(tabulate(out, headers=[i[0] for i in mycursor.description], tablefmt='psql'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xd9K3rbXUzZ5",
        "outputId": "2b0de570-04c5-41c8-91bf-d24ccbdc7c48"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+-----------+--------------+-----------+-------------+-----------+-------------+------------+-------------+-----------+------------+------------+------------+--------------+------------+--------------+-------------+--------------+-----------+-----------+------------+-------------+-----------+-----------+-----------+-------------+-----------+-----------+-------------+------------+-----------+-----------+--------------+-------------+--------------+--------------+-------------+------------+------------+-------------+------------+--------------+-----------+\n",
            "|   adanient |   adaniports |   apollohosp |   asianpaint |     axisbank |   bajaj-auto |   bajajfinsv |   bajfinance |       bel |   bhartiartl |      bpcl |   britannia |     cipla |   coalindia |    drreddy |   eichermot |    grasim |    hcltech |   hdfcbank |   hdfclife |   heromotoco |   hindalco |   hindunilvr |   icicibank |   indusindbk |      infy |       itc |   jswsteel |   kotakbank |        lt |       m&m |    maruti |   nestleind |      ntpc |      ongc |   powergrid |   reliance |   sbilife |      sbin |   shriramfin |   sunpharma |   tataconsum |   tatamotors |   tatasteel |        tcs |      techm |       titan |      trent |   ultracemco |     wipro |\n",
            "||\n",
            "|  1         |     0.845806 |     0.594807 | -0.186479    |  0.537048    |     0.634551 |    0.0801126 |    -0.437309 |  0.597634 |     0.482298 |  0.759587 |   0.447274  |  0.654769 |    0.76216  |  0.568855  |    0.480596 |  0.507493 |  0.440869  |  0.0457323 |  -0.129852 |     0.72286  |  0.538513  |   -0.0239913 |    0.496329 |     0.141291 |  0.333242 | 0.0113379 |  0.500642  |    0.102311 |  0.811118 |  0.458802 |  0.576769 |   0.484727  |  0.684553 |  0.705151 |    0.662056 |  0.848928  |  0.379076 |  0.699865 |    0.469428  |    0.555206 |   0.783299   |    0.783965  |   0.732033  |  0.601375  |  0.306188  |  0.457118   |  0.43679   |    0.590462  |  0.609774 |\n",
            "|  0.845806  |     1        |     0.815085 | -0.24652     |  0.770207    |     0.887718 |    0.215085  |    -0.486128 |  0.900377 |     0.81997  |  0.941068 |   0.729383  |  0.89397  |    0.95884  |  0.833252  |    0.809143 |  0.859429 |  0.628889  |  0.31602   |   0.16977  |     0.927167 |  0.804026  |    0.238913  |    0.831921 |    -0.195635 |  0.604507 | 0.334372  |  0.767751  |    0.100027 |  0.854856 |  0.802967 |  0.783546 |   0.357643  |  0.927944 |  0.932968 |    0.942616 |  0.899794  |  0.681709 |  0.925261 |    0.793997  |    0.833258 |   0.823057   |    0.916523  |   0.834255  |  0.817482  |  0.659344  |  0.215162   |  0.779358  |    0.855521  |  0.798804 |\n",
            "|  0.594807  |     0.815085 |     1        | -0.157872    |  0.607392    |     0.893753 |    0.50915   |    -0.410892 |  0.752139 |     0.865525 |  0.872684 |   0.76188   |  0.895506 |    0.800067 |  0.857218  |    0.720422 |  0.807365 |  0.912645  |  0.429288  |   0.483689 |     0.81308  |  0.721501  |    0.388173  |    0.853108 |    -0.447425 |  0.843184 | 0.530459  |  0.800106  |    0.234734 |  0.712629 |  0.75861  |  0.563828 |   0.167141  |  0.901043 |  0.795543 |    0.830934 |  0.645386  |  0.817298 |  0.739885 |    0.900182  |    0.948026 |   0.668899   |    0.687952  |   0.520929  |  0.86191   |  0.849917  |  0.26892    |  0.877633  |    0.830027  |  0.9069   |\n",
            "| -0.186479  |    -0.24652  |    -0.157872 |  1           |  0.000970626 |    -0.162563 |    0.463444  |     0.609427 | -0.246263 |    -0.178033 | -0.25244  |   0.244528  | -0.201212 |   -0.200126 | -0.0664551 |   -0.166484 | -0.128088 | -0.0841153 |  0.298623  |   0.383915 |    -0.134136 | -0.0831393 |    0.609737  |   -0.211488 |     0.441991 |  0.106584 | 0.460887  | -0.0601943 |    0.575571 | -0.140669 | -0.212399 | -0.299957 |   0.332442  | -0.147944 | -0.239636 |   -0.266174 | -0.221456  |  0.206655 | -0.42679  |   -0.0301359 |   -0.210304 |  -0.00559269 |   -0.247491  |  -0.357433  | -0.0383841 | -0.0309045 |  0.370942   | -0.0931183 |    0.0173791 | -0.230921 |\n",
            "|  0.537048  |     0.770207 |     0.607392 |  0.000970626 |  1           |     0.74285  |    0.334558  |    -0.15525  |  0.863011 |     0.767627 |  0.67418  |   0.795817  |  0.6953   |    0.737842 |  0.643701  |    0.839801 |  0.848108 |  0.453107  |  0.634658  |   0.258353 |     0.836953 |  0.834664  |    0.47433   |    0.819641 |    -0.205324 |  0.540266 | 0.464064  |  0.811117  |    0.275503 |  0.653209 |  0.822275 |  0.596535 |   0.326966  |  0.769117 |  0.663991 |    0.820524 |  0.64985   |  0.600855 |  0.772675 |    0.740759  |    0.620854 |   0.531076   |    0.596831  |   0.709668  |  0.596471  |  0.681483  |  0.0026429  |  0.735466  |    0.867694  |  0.674543 |\n",
            "|  0.634551  |     0.887718 |     0.893753 | -0.162563    |  0.74285     |     1        |    0.516365  |    -0.322937 |  0.872667 |     0.95101  |  0.924263 |   0.828767  |  0.951692 |    0.896068 |  0.834474  |    0.847652 |  0.90232  |  0.75197   |  0.453886  |   0.383916 |     0.931282 |  0.868757  |    0.424007  |    0.920296 |    -0.348109 |  0.726279 | 0.520786  |  0.883737  |    0.1706   |  0.746205 |  0.89316  |  0.79363  |   0.296111  |  0.956263 |  0.850437 |    0.931858 |  0.728359  |  0.821833 |  0.851753 |    0.937393  |    0.945571 |   0.71138    |    0.786309  |   0.745496  |  0.822605  |  0.801832  |  0.19971    |  0.936383  |    0.860869  |  0.816423 |\n",
            "|  0.0801126 |     0.215085 |     0.50915  |  0.463444    |  0.334558    |     0.516365 |    1         |     0.385476 |  0.248288 |     0.517993 |  0.323783 |   0.609397  |  0.406704 |    0.229485 |  0.376977  |    0.354212 |  0.433513 |  0.567613  |  0.579714  |   0.698352 |     0.344493 |  0.447122  |    0.643658  |    0.489162 |    -0.154909 |  0.594745 | 0.705144  |  0.58553   |    0.53376  |  0.278013 |  0.400053 |  0.201554 |   0.1985    |  0.459747 |  0.18256  |    0.297133 |  0.0423753 |  0.689049 |  0.126643 |    0.618333  |    0.518523 |   0.19307    |    0.0880771 |   0.0663937 |  0.416618  |  0.564844  |  0.357229   |  0.575921  |    0.448905  |  0.383862 |\n",
            "| -0.437309  |    -0.486128 |    -0.410892 |  0.609427    | -0.15525     |    -0.322937 |    0.385476  |     1        | -0.353268 |    -0.280086 | -0.553193 |  -0.0997843 | -0.416787 |   -0.511341 | -0.436259  |   -0.302317 | -0.286397 | -0.345507  |  0.250851  |   0.154158 |    -0.375013 | -0.201775  |    0.279955  |   -0.302548 |     0.290752 | -0.22603  | 0.202961  | -0.15567   |    0.378103 | -0.325636 | -0.258045 | -0.307296 |   0.0268721 | -0.400142 | -0.531658 |   -0.454651 | -0.473331  | -0.154123 | -0.517513 |   -0.204818  |   -0.418315 |  -0.422037   |   -0.53298   |  -0.336865  | -0.415928  | -0.21903   |  0.0389631  | -0.267963  |   -0.261172  | -0.434766 |\n",
            "|  0.597634  |     0.900377 |     0.752139 | -0.246263    |  0.863011    |     0.872667 |    0.248288  |    -0.353268 |  1        |     0.90427  |  0.839831 |   0.79657   |  0.860834 |    0.889725 |  0.780024  |    0.935375 |  0.945539 |  0.566125  |  0.538497  |   0.300118 |     0.900283 |  0.904585  |    0.382345  |    0.908999 |    -0.415288 |  0.618484 | 0.476032  |  0.873037  |    0.113773 |  0.729188 |  0.949324 |  0.770722 |   0.159641  |  0.905961 |  0.850691 |    0.957864 |  0.723472  |  0.682444 |  0.925349 |    0.841851  |    0.80453  |   0.603618   |    0.761131  |   0.811677  |  0.723381  |  0.777004  | -0.0931563  |  0.863242  |    0.894777  |  0.751017 |\n",
            "|  0.482298  |     0.81997  |     0.865525 | -0.178033    |  0.767627    |     0.95101  |    0.517993  |    -0.280086 |  0.90427  |     1        |  0.849212 |   0.856599  |  0.899717 |    0.82943  |  0.806902  |    0.895839 |  0.942274 |  0.745889  |  0.587043  |   0.491454 |     0.877967 |  0.907002  |    0.489789  |    0.966674 |    -0.541783 |  0.765813 | 0.623881  |  0.926815  |    0.170062 |  0.655302 |  0.952157 |  0.726139 |   0.0830651 |  0.940136 |  0.791537 |    0.922192 |  0.586384  |  0.810912 |  0.832022 |    0.956799  |    0.93237  |   0.552207   |    0.6627    |   0.673597  |  0.766584  |  0.896261  | -0.00940744 |  0.976264  |    0.869263  |  0.80227  |\n",
n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "684f78f0",
        "outputId": "053119e4-ef1c-4ea0-d0d8-8289a64f10a5"
      },
      "source": [
        "mycursor.execute(\"SELECT adaniports FROM Stock_Analysis.correlationmatrix WHERE `adanient` IS NOT NULL LIMIT 1\")\n",
        "\n",
        "out = mycursor.fetchone()\n",
        "from tabulate import tabulate\n",
        "print(tabulate([out], headers=[i[0] for i in mycursor.description], tablefmt='psql'))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+--------------+\n",
            "|   adaniports |\n",
            "|--------------|\n",
            "|     0.845806 |\n",
            "+--------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "lFVXs6MsYgfp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ff30b58e",
        "outputId": "6ac5211c-8a21-47c9-eb15-cbc46bac13ff"
      },
      "source": [
        "mycursor.execute(\"SELECT britannia FROM Stock_Analysis.correlationmatrix WHERE `asianpaint` IS NOT NULL LIMIT 1\")\n",
        "\n",
        "out = mycursor.fetchone()\n",
        "from tabulate import tabulate\n",
        "print(tabulate([out], headers=[i[0] for i in mycursor.description], tablefmt='psql'))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+-------------+\n",
            "|   britannia |\n",
            "|-------------|\n",
            "|    0.447274 |\n",
            "+-------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Top 5 Gainers and Losers (Month-wise):**\n"
      ],
      "metadata": {
        "id": "GseoqdyVY11n"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "sImMbLcwYu5j"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "89fe5a81",
        "outputId": "0c1c2b12-be49-434b-a437-a0dff99e02ef"
      },
      "source": [
        "# Top 5 Gainers per month\n",
        "mycursor.execute(\"\"\"\n",
        "    SELECT\n",
        "        month,\n",
        "        ticker,\n",
        "        AVG(daily_return) as avg_daily_return\n",
        "    FROM\n",
        "        Stock_Analysis.full_dailyreturn_stocks\n",
        "    GROUP BY\n",
        "        month, ticker\n",
        "    ORDER BY\n",
        "        month ASC, avg_daily_return DESC\n",
        "\"\"\")\n",
        "\n",
        "top_gainers = mycursor.fetchall()\n",
        "\n",
        "from tabulate import tabulate\n",
        "print(\"Top 5 Gainers per Month:\")\n",
        "# Group the results by month for display\n",
        "monthly_gainers = {}\n",
        "for month, ticker, avg_return in top_gainers:\n",
        "    if month not in monthly_gainers:\n",
        "        monthly_gainers[month] = []\n",
        "    monthly_gainers[month].append([ticker, avg_return])\n",
        "\n",
        "for month, stocks in monthly_gainers.items():\n",
        "    print(f\"\\nMonth: {month}\")\n",
        "    print(tabulate(stocks[:5], headers=[\"Ticker\", \"Average Daily Return\"], tablefmt='psql'))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Top 5 Gainers per Month:\n",
            "\n",
            "Month: 2023-10\n",
            "+----------+------------------------+\n",
            "| Ticker   |   Average Daily Return |\n",
            "|----------+------------------------|\n",
            "| ADANIENT |             0.00521062 |\n",
            "| WIPRO    |             0.00446528 |\n",
            "| INFY     |             0.00445754 |\n",
            "| TECHM    |             0.00431147 |\n",
            "| TCS      |             0.00413286 |\n",
            "+----------+------------------------+\n",
            "\n",
            "Month: 2023-11\n",
            "+------------+------------------------+\n",
            "| Ticker     |   Average Daily Return |\n",
            "|------------+------------------------|\n",
            "| TRENT      |             0.0150532  |\n",
            "| HEROMOTOCO |             0.0114259  |\n",
            "| BPCL       |             0.0113597  |\n",
            "| BAJAJ-AUTO |             0.00944613 |\n",
            "| COALINDIA  |             0.00822827 |\n",
            "+------------+------------------------+\n",
            "\n",
            "Month: 2023-12\n",
            "+------------+------------------------+\n",
            "| Ticker     |   Average Daily Return |\n",
            "|------------+------------------------|\n",
            "| BEL        |             0.01189    |\n",
            "| ADANIPORTS |             0.0115562  |\n",
            "| ADANIENT   |             0.0103732  |\n",
            "| NTPC       |             0.00896565 |\n",
            "| HINDALCO   |             0.00894622 |\n",
            "+------------+------------------------+\n",
            "\n",
            "Month: 2024-01\n",
            "+------------+------------------------+\n",
            "| Ticker     |   Average Daily Return |\n",
            "|------------+------------------------|\n",
            "| ONGC       |             0.00980852 |\n",
            "| SHRIRAMFIN |             0.00854476 |\n",
            "| ADANIPORTS |             0.00773665 |\n",
            "| BHARTIARTL |             0.00584649 |\n",
            "| TATAMOTORS |             0.00581488 |\n",
            "+------------+------------------------+\n",
            "\n",
            "Month: 2024-02\n",
            "+-----------+------------------------+\n",
            "| Ticker    |   Average Daily Return |\n",
            "|-----------+------------------------|\n",
            "| TRENT     |             0.0118814  |\n",
            "| BPCL      |             0.00937092 |\n",
            "| M&M       |             0.00770712 |\n",
            "| SBIN      |             0.00758799 |\n",
            "| SUNPHARMA |             0.00514319 |\n",
            "+-----------+------------------------+\n",
            "\n",
            "Month: 2024-03\n",
            "+------------+------------------------+\n",
            "| Ticker     |   Average Daily Return |\n",
            "|------------+------------------------|\n",
            "| BAJAJ-AUTO |             0.00781139 |\n",
            "| MARUTI     |             0.00589926 |\n",
            "| BAJFINANCE |             0.00587781 |\n",
            "| TATASTEEL  |             0.0057502  |\n",
            "| HINDALCO   |             0.00574337 |\n",
            "+------------+------------------------+\n",
            "\n",
            "Month: 2024-04\n",
            "+-----------+------------------------+\n",
            "| Ticker    |   Average Daily Return |\n",
            "|-----------+------------------------|\n",
            "| BEL       |             0.00757921 |\n",
            "| HINDALCO  |             0.00710714 |\n",
            "| EICHERMOT |             0.00686261 |\n",
            "| M&M       |             0.00592878 |\n",
            "| TRENT     |             0.00565116 |\n",
            "+-----------+------------------------+\n",
            "\n",
            "Month: 2024-05\n",
            "+------------+------------------------+\n",
            "| Ticker     |   Average Daily Return |\n",
            "|------------+------------------------|\n",
            "| BEL        |             0.0110199  |\n",
            "| M&M        |             0.00703707 |\n",
            "| HEROMOTOCO |             0.00556178 |\n",
            "| ADANIENT   |             0.00545733 |\n",
            "| ADANIPORTS |             0.00391984 |\n",
            "+------------+------------------------+\n",
            "\n",
            "Month: 2024-06\n",
            "+------------+------------------------+\n",
            "| Ticker     |   Average Daily Return |\n",
            "|------------+------------------------|\n",
            "| SHRIRAMFIN |             0.0118533  |\n",
            "| TRENT      |             0.0100121  |\n",
            "| ULTRACEMCO |             0.00892039 |\n",
            "| WIPRO      |             0.0086721  |\n",
            "| TECHM      |             0.0081779  |\n",
            "+------------+------------------------+\n",
            "\n",
            "Month: 2024-07\n",
            "+------------+------------------------+\n",
            "| Ticker     |   Average Daily Return |\n",
            "|------------+------------------------|\n",
            "| ONGC       |             0.00926142 |\n",
            "| HDFCLIFE   |             0.00851543 |\n",
            "| INFY       |             0.00809714 |\n",
            "| SBILIFE    |             0.0074998  |\n",
            "| TATAMOTORS |             0.00729276 |\n",
            "+------------+------------------------+\n",
            "\n",
            "Month: 2024-08\n",
            "+------------+------------------------+\n",
            "| Ticker     |   Average Daily Return |\n",
            "|------------+------------------------|\n",
            "| TRENT      |             0.0102735  |\n",
            "| BAJAJ-AUTO |             0.00581128 |\n",
            "| SHRIRAMFIN |             0.00442821 |\n",
            "| BAJAJFINSV |             0.00377891 |\n",
            "| CIPLA      |             0.00334831 |\n",
            "+------------+------------------------+\n",
            "\n",
            "Month: 2024-09\n",
            "+------------+------------------------+\n",
            "| Ticker     |   Average Daily Return |\n",
            "|------------+------------------------|\n",
            "| BAJAJ-AUTO |             0.00611309 |\n",
            "| SHRIRAMFIN |             0.00538564 |\n",
            "| BAJAJFINSV |             0.00494518 |\n",
            "| M&M        |             0.00485969 |\n",
            "| TATASTEEL  |             0.00478802 |\n",
            "+------------+------------------------+\n",
            "\n",
            "Month: 2024-10\n",
            "+-----------+------------------------+\n",
            "| Ticker    |   Average Daily Return |\n",
            "|-----------+------------------------|\n",
            "| SBIN      |            0.00197066  |\n",
            "| TECHM     |            0.00105321  |\n",
            "| WIPRO     |            0.00101565  |\n",
            "| ICICIBANK |            0.000784173 |\n",
            "| HDFCLIFE  |            0.000268058 |\n",
            "+-----------+------------------------+\n",
            "\n",
            "Month: 2024-11\n",
            "+----------+------------------------+\n",
            "| Ticker   |   Average Daily Return |\n",
            "|----------+------------------------|\n",
            "| M&M      |             0.00731442 |\n",
            "| TECHM    |             0.00607894 |\n",
            "| INFY     |             0.00582284 |\n",
            "| HCLTECH  |             0.00527313 |\n",
            "| TCS      |             0.00497844 |\n",
            "+----------+------------------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "66a815bb",
        "outputId": "1a160951-e4a5-42ed-b901-24369de865ae"
      },
      "source": [
        "# Top 5 Losers per month\n",
        "mycursor.execute(\"\"\"\n",
        "    SELECT\n",
        "        month,\n",
        "        ticker,\n",
        "        AVG(daily_return) as avg_daily_return\n",
        "    FROM\n",
        "        Stock_Analysis.full_dailyreturn_stocks\n",
        "    GROUP BY\n",
        "        month, ticker\n",
        "    ORDER BY\n",
        "        month ASC, avg_daily_return ASC\n",
        "\"\"\")\n",
        "\n",
        "top_losers = mycursor.fetchall()\n",
        "\n",
        "from tabulate import tabulate\n",
        "print(\"Top 5 Losers per Month:\")\n",
        "# Group the results by month for display\n",
        "monthly_losers = {}\n",
        "for month, ticker, avg_return in top_losers:\n",
        "    if month not in monthly_losers:\n",
        "        monthly_losers[month] = []\n",
        "    monthly_losers[month].append([ticker, avg_return])\n",
        "\n",
        "for month, stocks in monthly_losers.items():\n",
        "    print(f\"\\nMonth: {month}\")\n",
        "    print(tabulate(stocks[:5], headers=[\"Ticker\", \"Average Daily Return\"], tablefmt='psql'))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Top 5 Losers per Month:\n",
            "\n",
            "Month: 2023-10\n",
            "+------------+------------------------+\n",
            "| Ticker     |   Average Daily Return |\n",
            "|------------+------------------------|\n",
            "| COALINDIA  |            -0.00314821 |\n",
            "| SBILIFE    |            -0.00313286 |\n",
            "| TRENT      |            -0.00228215 |\n",
            "| NESTLEIND  |            -0.00216913 |\n",
            "| TATACONSUM |            -0.00208163 |\n",
            "+------------+------------------------+\n",
            "\n",
            "Month: 2023-11\n",
            "+------------+------------------------+\n",
            "| Ticker     |   Average Daily Return |\n",
            "|------------+------------------------|\n",
            "| BAJFINANCE |            -0.00451692 |\n",
            "| SBIN       |            -0.00216213 |\n",
            "| ADANIENT   |            -0.00161756 |\n",
            "| TCS        |            -0.00118783 |\n",
            "| ASIANPAINT |            -0.00108572 |\n",
            "+------------+------------------------+\n",
            "\n",
            "Month: 2023-12\n",
            "+------------+------------------------+\n",
            "| Ticker     |   Average Daily Return |\n",
            "|------------+------------------------|\n",
            "| HDFCLIFE   |           -0.00316332  |\n",
            "| MARUTI     |           -0.00142498  |\n",
            "| SBILIFE    |           -4.30832e-05 |\n",
            "| DRREDDY    |            0.000195506 |\n",
            "| BAJAJFINSV |            0.000417937 |\n",
            "+------------+------------------------+\n",
            "\n",
            "Month: 2024-01\n",
            "+------------+------------------------+\n",
            "| Ticker     |   Average Daily Return |\n",
            "|------------+------------------------|\n",
            "| HDFCBANK   |            -0.00680992 |\n",
            "| ASIANPAINT |            -0.00629636 |\n",
            "| HDFCLIFE   |            -0.00512608 |\n",
            "| EICHERMOT  |            -0.00334836 |\n",
            "| JSWSTEEL   |            -0.00319824 |\n",
            "+------------+------------------------+\n",
            "\n",
            "Month: 2024-02\n",
            "+------------+------------------------+\n",
            "| Ticker     |   Average Daily Return |\n",
            "|------------+------------------------|\n",
            "| HINDALCO   |            -0.00617474 |\n",
            "| ITC        |            -0.00386571 |\n",
            "| KOTAKBANK  |            -0.00360785 |\n",
            "| BAJFINANCE |            -0.00253549 |\n",
            "| ASIANPAINT |            -0.00215863 |\n",
            "+------------+------------------------+\n",
            "\n",
            "Month: 2024-03\n",
            "+------------+------------------------+\n",
            "| Ticker     |   Average Daily Return |\n",
            "|------------+------------------------|\n",
            "| INFY       |            -0.0057411  |\n",
            "| TATACONSUM |            -0.00414988 |\n",
            "| WIPRO      |            -0.00395502 |\n",
            "| HCLTECH    |            -0.00386342 |\n",
            "| HINDUNILVR |            -0.00328132 |\n",
            "+------------+------------------------+\n",
            "\n",
            "Month: 2024-04\n",
            "+-----------+------------------------+\n",
            "| Ticker    |   Average Daily Return |\n",
            "|-----------+------------------------|\n",
            "| HCLTECH   |            -0.00593374 |\n",
            "| KOTAKBANK |            -0.00434294 |\n",
            "| HDFCLIFE  |            -0.00403124 |\n",
            "| SUNPHARMA |            -0.00368738 |\n",
            "| CIPLA     |            -0.00326559 |\n",
            "+-----------+------------------------+\n",
            "\n",
            "Month: 2024-05\n",
            "+------------+------------------------+\n",
            "| Ticker     |   Average Daily Return |\n",
            "|------------+------------------------|\n",
            "| TITAN      |            -0.00443831 |\n",
            "| TATAMOTORS |            -0.00374301 |\n",
            "| SHRIRAMFIN |            -0.00353072 |\n",
            "| DRREDDY    |            -0.00304039 |\n",
            "| ONGC       |            -0.00293829 |\n",
            "+------------+------------------------+\n",
            "\n",
            "Month: 2024-06\n",
            "+-----------+------------------------+\n",
            "| Ticker    |   Average Daily Return |\n",
            "|-----------+------------------------|\n",
            "| ADANIENT  |            -0.00236218 |\n",
            "| MARUTI    |            -0.00148846 |\n",
            "| COALINDIA |            -0.00125739 |\n",
            "| LT        |            -0.0011284  |\n",
            "| BPCL      |            -0.0010201  |\n",
            "+-----------+------------------------+\n",
            "\n",
            "Month: 2024-07\n",
            "+------------+------------------------+\n",
            "| Ticker     |   Average Daily Return |\n",
            "|------------+------------------------|\n",
            "| AXISBANK   |            -0.0036082  |\n",
            "| TATASTEEL  |            -0.00219814 |\n",
            "| BAJFINANCE |            -0.00192739 |\n",
            "| HDFCBANK   |            -0.00176927 |\n",
            "| RELIANCE   |            -0.00170724 |\n",
            "+------------+------------------------+\n",
            "\n",
            "Month: 2024-08\n",
            "+------------+------------------------+\n",
            "| Ticker     |   Average Daily Return |\n",
            "|------------+------------------------|\n",
            "| TATASTEEL  |            -0.00357571 |\n",
            "| SBIN       |            -0.00310615 |\n",
            "| ADANIPORTS |            -0.00258599 |\n",
            "| MARUTI     |            -0.0025229  |\n",
            "| BEL        |            -0.00242066 |\n",
            "+------------+------------------------+\n",
            "\n",
            "Month: 2024-09\n",
            "+------------+------------------------+\n",
            "| Ticker     |   Average Daily Return |\n",
            "|------------+------------------------|\n",
            "| TATAMOTORS |            -0.00609751 |\n",
            "| ONGC       |            -0.00487419 |\n",
            "| TCS        |            -0.00303324 |\n",
            "| BEL        |            -0.00216069 |\n",
            "| DRREDDY    |            -0.00189536 |\n",
            "+------------+------------------------+\n",
            "\n",
            "Month: 2024-10\n",
            "+------------+------------------------+\n",
            "| Ticker     |   Average Daily Return |\n",
            "|------------+------------------------|\n",
            "| INDUSINDBK |            -0.0133471  |\n",
            "| BAJAJ-AUTO |            -0.00975525 |\n",
            "| MARUTI     |            -0.00795442 |\n",
            "| TATACONSUM |            -0.0078115  |\n",
            "| NESTLEIND  |            -0.00775889 |\n",
            "+------------+------------------------+\n",
            "\n",
            "Month: 2024-11\n",
            "+------------+------------------------+\n",
            "| Ticker     |   Average Daily Return |\n",
            "|------------+------------------------|\n",
            "| ADANIENT   |            -0.0176788  |\n",
            "| ADANIPORTS |            -0.0127482  |\n",
            "| ASIANPAINT |            -0.0119202  |\n",
            "| BRITANNIA  |            -0.0115145  |\n",
            "| NTPC       |            -0.00772143 |\n",
            "+------------+------------------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "PLehIkNCZl4T"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "66189596"
      },
      "source": [
        "import pandas as pd\n",
        "import plotly.express as px\n",
        "import streamlit as st\n",
        "import mysql.connector\n",
        "\n",
        "# Establish database connection\n",
        "@st.cache_resource\n",
        "def get_db_connection():\n",
        "    try:\n",
        "        mydb = mysql.connector.connect(\n",
        "            host=\"gateway01.ap-southeast-1.prod.aws.tidbcloud.com\",\n",
        "            user=\"3LBRyXkYRgoP1FS.root\",\n",
        "            password=\"fwJACxECJe0b7ZlM\",\n",
        "            port=4000,\n",
        "            database=\"Stock_Analysis\" # Specify the database here\n",
        "        )\n",
        "        return mydb\n",
        "    except Exception as e:\n",
        "        st.error(f\"Error connecting to the database: {e}\")\n",
        "        st.stop() # Stop the app if connection fails\n",
        "\n",
        "mydb = get_db_connection()\n",
        "mycursor = mydb.cursor(buffered=True)\n",
        "\n",
        "\n",
        "st.title(\"Stock Performance Analysis\")\n",
        "\n",
        "\n",
        "# Get lists of unique stocks, sectors, and months for filtering\n",
        "try:\n",
        "    mycursor.execute(\"SELECT DISTINCT ticker FROM stocks_with_sector\")\n",
        "    all_stocks = [stock[0] for stock in mycursor.fetchall()]\n",
        "\n",
        "    mycursor.execute(\"SELECT DISTINCT sector FROM stocks_with_sector WHERE sector IS NOT NULL\")\n",
        "    all_sectors = [sector[0] for sector in mycursor.fetchall()]\n",
        "\n",
        "    mycursor.execute(\"SELECT DISTINCT month FROM full_dailyreturn_stocks WHERE month IS NOT NULL ORDER BY month\")\n",
        "    all_months = [month[0].strftime('%Y-%m') for month in mycursor.fetchall()] # Format month as YYYY-MM\n",
        "\n",
        "except Exception as e:\n",
        "    st.error(f\"Error fetching filter lists: {e}\")\n",
        "    all_stocks = []\n",
        "    all_sectors = []\n",
        "    all_months = []\n",
        "\n",
        "# Initialize session state for filters if not already set\n",
        "if 'selected_stocks' not in st.session_state:\n",
        "    st.session_state.selected_stocks = all_stocks\n",
        "if 'selected_sectors' not in st.session_state:\n",
        "    st.session_state.selected_sectors = all_sectors\n",
        "if 'selected_months' not in st.session_state:\n",
        "    st.session_state.selected_months = all_months\n",
        "\n",
        "\n",
        "# --- Sidebar Filters ---\n",
        "st.sidebar.header(\"Filter Data\")\n",
        "\n",
        "# Use session state to manage the multiselect values\n",
        "selected_stocks = st.sidebar.multiselect(\n",
        "    \"Select stocks:\",\n",
        "    all_stocks,\n",
        "    default=st.session_state.selected_stocks,\n",
        "    key='stock_multiselect' # Add a unique key\n",
        ")\n",
        "st.session_state.selected_stocks = selected_stocks # Update session state\n",
        "\n",
        "selected_sectors = st.sidebar.multiselect(\n",
        "    \"Select sectors:\",\n",
        "    all_sectors,\n",
        "    default=st.session_state.selected_sectors,\n",
        "    key='sector_multiselect' # Add a unique key\n",
        ")\n",
        "st.session_state.selected_sectors = selected_sectors # Update session state\n",
        "\n",
        "selected_months = st.sidebar.multiselect(\n",
        "    \"Select months:\",\n",
        "    all_months,\n",
        "    default=st.session_state.selected_months,\n",
        "    key='month_multiselect' # Add a unique key\n",
        ")\n",
        "st.session_state.selected_months = selected_months # Update session state\n",
        "\n",
        "\n",
        "# --- Top 10 Green Stocks (Bar Chart) ---\n",
        "st.header(\"Top 10 Green Stocks (Yearly Return)\")\n",
        "try:\n",
        "    if selected_stocks and selected_sectors:\n",
        "        stock_filter = \"','\".join(selected_stocks)\n",
        "        sector_filter = \"','\".join(selected_sectors)\n",
        "        query = f\"\"\"\n",
        "            SELECT yr.stock, yr.return\n",
        "            FROM YearlyReturn yr\n",
        "            JOIN stocks_with_sector s ON yr.stock = s.ticker\n",
        "            WHERE yr.stock IN ('{stock_filter}') AND s.sector IN ('{sector_filter}')\n",
        "            ORDER BY yr.return DESC LIMIT 10\n",
        "        \"\"\"\n",
        "        mycursor.execute(query)\n",
        "        top_green_stocks_data = mycursor.fetchall()\n",
        "        top_green_stocks_df = pd.DataFrame(top_green_stocks_data, columns=['Stock', 'Return'])\n",
        "        fig_green = px.bar(top_green_stocks_df, x='Stock', y='Return', title='Top 10 Green Stocks by Yearly Return')\n",
        "        st.plotly_chart(fig_green)\n",
        "    else:\n",
        "        st.info(\"Please select at least one stock and one sector to display Top 10 Green Stocks.\")\n",
        "except Exception as e:\n",
        "    st.error(f\"Error fetching or visualizing Top 10 Green Stocks: {e}\")\n",
        "\n",
        "# --- Top 10 Loss Stocks (Bar Chart) ---\n",
        "st.header(\"Top 10 Loss Stocks (Yearly Return)\")\n",
        "try:\n",
        "    if selected_stocks and selected_sectors:\n",
        "        stock_filter = \"','\".join(selected_stocks)\n",
        "        sector_filter = \"','\".join(selected_sectors)\n",
        "        query = f\"\"\"\n",
        "            SELECT yr.stock, yr.return\n",
        "            FROM YearlyReturn yr\n",
        "            JOIN stocks_with_sector s ON yr.stock = s.ticker\n",
        "            WHERE yr.stock IN ('{stock_filter}') AND s.sector IN ('{sector_filter}')\n",
        "            ORDER BY yr.return ASC LIMIT 10\n",
        "        \"\"\"\n",
        "        mycursor.execute(query)\n",
        "        top_loss_stocks_data = mycursor.fetchall()\n",
        "        top_loss_stocks_df = pd.DataFrame(top_loss_stocks_data, columns=['Stock', 'Return'])\n",
        "        fig_loss = px.bar(top_loss_stocks_df, x='Stock', y='Return', title='Top 10 Loss Stocks by Yearly Return')\n",
        "        st.plotly_chart(fig_loss)\n",
        "    else:\n",
        "        st.info(\"Please select at least one stock and one sector to display Top 10 Loss Stocks.\")\n",
        "except Exception as e:\n",
        "    st.error(f\"Error fetching or visualizing Top 10 Loss Stocks: {e}\")\n",
        "\n",
        "\n",
        "# --- Volatility (Bar Chart) ---\n",
        "st.header(\"Stock Volatility (Average Daily Return Standard Deviation)\")\n",
        "try:\n",
        "    if selected_stocks and selected_months:\n",
        "        stock_filter = \"','\".join(selected_stocks)\n",
        "        month_filter = \"','\".join(selected_months)\n",
        "        query = f\"\"\"\n",
        "            SELECT ticker, AVG(daily_return_std) as avg_daily_return_std\n",
        "            FROM volatility\n",
        "            WHERE ticker IN ('{stock_filter}') AND DATE_FORMAT(date, '%Y-%m') IN ('{month_filter}')\n",
        "            GROUP BY ticker\n",
        "            ORDER BY AVG(daily_return_std) DESC\n",
        "        \"\"\"\n",
        "        mycursor.execute(query)\n",
        "        volatility_data = mycursor.fetchall()\n",
        "        volatility_df = pd.DataFrame(volatility_data, columns=['Ticker', 'Average Daily Return Std'])\n",
        "        fig_volatility = px.bar(volatility_df, x='Ticker', y='Average Daily Return Std', title='Stock Volatility')\n",
        "        st.plotly_chart(fig_volatility)\n",
        "    else:\n",
        "        st.info(\"Please select at least one stock and one month to display Volatility.\")\n",
        "except Exception as e:\n",
        "    st.error(f\"Error fetching or visualizing Volatility: {e}\")\n",
        "\n",
        "\n",
        "# --- Sector-wise Performance (Bar Chart) ---\n",
        "# This chart will now also be filtered by selected sectors and months if applicable data exists in stocks_with_sector table\n",
        "st.header(\"Sector-wise Performance (Average Yearly Return)\")\n",
        "try:\n",
        "    if selected_sectors and selected_months:\n",
        "        sector_filter = \"','\".join(selected_sectors)\n",
        "        month_filter = \"','\".join(selected_months)\n",
        "        query = f\"\"\"\n",
        "            SELECT s.sector, AVG(yr.return) AS average_yearly_return\n",
        "            FROM YearlyReturn yr\n",
        "            JOIN stocks_with_sector s ON yr.stock = s.ticker\n",
        "             JOIN full_dailyreturn_stocks fds ON yr.stock = fds.ticker\n",
        "            WHERE s.sector IN ('{sector_filter}') AND DATE_FORMAT(fds.date, '%Y-%m') IN ('{month_filter}')\n",
        "            GROUP BY s.sector\n",
        "            ORDER BY AVG(yr.return) DESC\n",
        "        \"\"\"\n",
        "        mycursor.execute(query)\n",
        "        sector_performance_data = mycursor.fetchall()\n",
        "        sector_performance_df = pd.DataFrame(sector_performance_data, columns=['Sector', 'Average Yearly Return'])\n",
        "        fig_sector = px.bar(sector_performance_df, x='Sector', y='Average Yearly Return', title='Sector-wise Performance')\n",
        "        st.plotly_chart(fig_sector)\n",
        "    else:\n",
        "         st.info(\"Please select at least one sector and one month to display Sector-wise Performance.\")\n",
        "\n",
        "except Exception as e:\n",
        "    st.error(f\"Error fetching or visualizing Sector-wise Performance: {e}\")\n",
        "\n",
        "\n",
        "# --- Stock Price Correlation (Heatmap) ---\n",
        "st.header(\"Stock Price Correlation Heatmap\")\n",
        "try:\n",
        "    if selected_stocks and len(selected_stocks) > 1 and selected_months:\n",
        "        stock_filter = \"','\".join(selected_stocks)\n",
        "        month_filter = \"','\".join(selected_months)\n",
        "        # Fetch data from full_dailyreturn_stocks to calculate correlation for selected stocks and months\n",
        "        query = f\"\"\"\n",
        "            SELECT ticker, daily_return, date\n",
        "            FROM full_dailyreturn_stocks\n",
        "            WHERE ticker IN ('{stock_filter}') AND DATE_FORMAT(date, '%Y-%m') IN ('{month_filter}')\n",
        "        \"\"\"\n",
        "        mycursor.execute(query)\n",
        "        daily_returns_data = mycursor.fetchall()\n",
        "        daily_returns_df = pd.DataFrame(daily_returns_data, columns=['ticker', 'daily_return', 'date'])\n",
        "\n",
        "        if not daily_returns_df.empty:\n",
        "            # Pivot the data to get daily returns for each stock in columns\n",
        "            pivot_df = daily_returns_df.pivot_table(index='date', columns='ticker', values='daily_return')\n",
        "\n",
        "            # Calculate the correlation matrix\n",
        "            correlation_matrix = pivot_df.corr()\n",
        "\n",
        "            fig_heatmap = px.imshow(correlation_matrix,\n",
        "                                    text_auto=True,\n",
        "                                    aspect=\"auto\",\n",
        "                                    title='Stock Price Correlation Heatmap for Selected Stocks and Months')\n",
        "            st.plotly_chart(fig_heatmap)\n",
        "        else:\n",
        "             st.info(\"No data available for selected stocks and months to build correlation heatmap.\")\n",
        "\n",
        "    elif selected_stocks and len(selected_stocks) <= 1:\n",
        "         st.info(\"Select more than one stock to see the correlation heatmap.\")\n",
        "    elif not selected_months:\n",
        "         st.info(\"Please select at least one month to display the correlation heatmap.\")\n",
        "    else:\n",
        "         st.info(\"Please select at least one stock and one month to display the heatmap.\")\n",
        "\n",
        "except Exception as e:\n",
        "    st.error(f\"Error fetching or visualizing Stock Price Correlation: {e}\")\n",
        "\n",
        "\n",
        "# --- Instructions to run ---\n",
        "st.markdown(\"\"\"\n",
        "To run this Streamlit app:\n",
        "1. Save the code above as a Python file (e.g., `stock_app.py`).\n",
        "2. Make sure you have Streamlit, pandas, plotly, and mysql-connector-python installed (`pip install streamlit pandas plotly mysql-connector-python`).\n",
        "3. Open your terminal or command prompt, navigate to the directory where you saved the file, and run:\n",
        "   `streamlit run stock_app.py`\n",
        "\"\"\")"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}